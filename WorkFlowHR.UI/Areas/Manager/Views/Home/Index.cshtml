@using Newtonsoft.Json
@using System.Collections.Generic
@{
    ViewData["Title"] = "Manager Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var loginName = ViewBag.LoginFirstName as string ?? User?.Identity?.Name ?? "Manager";
    int employeesCount = ViewBag.EmployeesCount ?? 0;
    int totalLeaves = ViewBag.TotalLeaves ?? 0;
    int totalAdvances = ViewBag.TotalAdvances ?? 0;

    var leaveCounts = ViewBag.LeaveCounts as IDictionary<string, int> ?? new Dictionary<string, int>();
    var advanceCounts = ViewBag.AdvanceCounts as IDictionary<string, int> ?? new Dictionary<string, int>();
    var expenseCounts = ViewBag.ExpenseCounts as IDictionary<string, int> ?? new Dictionary<string, int>();
}

<div class="page-head">
    <div>
        <h1 class="page-title">Welcome, @loginName 👋</h1>
        <p class="page-subtitle">Here is a summary of your team's activities.</p>
    </div>
    <div class="text-right">
        <div id="clock" class="page-clock">--:--</div>
        <div id="today" class="page-date">-- -- ----</div>
    </div>
</div>

<div class="row">
    <div class="col-md-4 mb-4">
        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-icon icon-employees">
                    <i class="ti-user"></i>
                </div>
                <div class="kpi-details">
                    <div class="kpi-value">@employeesCount</div>
                    <div class="kpi-label">Active Employees</div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4 mb-4">
        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-icon icon-leaves">
                    <i class="ti-calendar"></i>
                </div>
                <div class="kpi-details">
                    <div class="kpi-value">@totalLeaves</div>
                    <div class="kpi-label">Pending Leaves</div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4 mb-4">
        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-icon icon-advances">
                    <i class="ti-credit-card"></i>
                </div>
                <div class="kpi-details">
                    <div class="kpi-value">@totalAdvances</div>
                    <div class="kpi-label">Pending Advances</div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-4 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Weekly Leave Requests</h4>
                <div class="chart-container">
                    <canvas id="chartLeaves"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-4 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Weekly Advance Requests</h4>
                <div class="chart-container">
                    <canvas id="chartAdvances"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-4 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Weekly Expense Requests</h4>
                <div class="chart-container">
                    <canvas id="chartExpenses"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Team Calendar</h4>
                <div id="dashboard-calendar"></div>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <style>
        .page-head {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
            margin-bottom: 2rem;
        }

        .page-title {
            font-weight: 600;
            font-size: 1.75rem;
            margin: 0;
        }

        .page-subtitle {
            margin: 0.25rem 0 0;
            color: var(--secondary-color);
        }

        .page-clock {
            font-size: 1.7rem;
            font-weight: 700;
            color: var(--text-color);
        }

        .page-date {
            color: var(--secondary-color);
            font-weight: 500;
            font-size: 0.9rem;
        }

        .card {
            border: 1px solid var(--border-color);
            border-radius: var(--radius-md, 8px);
            box-shadow: none;
            transition: all 0.2s ease-in-out;
        }

            .card:hover {
                box-shadow: var(--shadow-md, 0 4px 6px -1px rgba(0,0,0,.1), 0 2px 4px -2px rgba(0,0,0,.1));
                transform: translateY(-2px);
            }

        .card-body {
            padding: 1.5rem;
        }

        .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1.25rem;
        }

        .kpi-card .card-body {
            display: flex;
            align-items: center;
            gap: 1.25rem;
        }

        .kpi-icon {
            flex-shrink: 0;
            width: 54px;
            height: 54px;
            border-radius: 50%;
            display: grid;
            place-items: center;
            color: #fff;
            font-size: 1.6rem;
        }

            .kpi-icon.icon-employees {
                background-color: #0d6efd;
            }

            .kpi-icon.icon-leaves {
                background-color: #fd7e14;
            }

            .kpi-icon.icon-advances {
                background-color: #198754;
            }

        .kpi-value {
            font-size: 2rem;
            font-weight: 700;
            line-height: 1.2;
        }

        .kpi-label {
            color: var(--secondary-color);
            font-weight: 500;
        }

        .chart-container {
            position: relative;
            height: 250px;
            width: 100%;
        }

        /* jQuery UI Calendar Theming */
        #dashboard-calendar .ui-datepicker {
            width: 100%;
            border: none !important;
            background: none !important;
            padding: 0 !important;
        }

        #dashboard-calendar .ui-datepicker-header {
            background: var(--bg-light) !important;
            border: 1px solid var(--border-color) !important;
            border-radius: var(--radius-md, 8px) !important;
        }

        #dashboard-calendar .ui-datepicker-title {
            font-weight: 600;
        }

        #dashboard-calendar .ui-datepicker th {
            font-weight: 500;
            color: var(--secondary-color);
        }

        #dashboard-calendar .ui-state-default {
            background: var(--bg-white) !important;
            border: 1px solid var(--border-color) !important;
            text-align: center !important;
            font-weight: 500 !important;
            color: var(--text-color) !important;
        }

        #dashboard-calendar .ui-state-hover {
            background: var(--bg-light) !important;
            border-color: #adb5bd !important;
        }

        #dashboard-calendar .ui-state-highlight {
            background: var(--primary-color) !important;
            color: var(--bg-white) !important;
            border-color: var(--primary-color) !important;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script>
        // Saat & Tarih
        (function () {
            const clockEl = document.getElementById('clock');
            const todayEl = document.getElementById('today');
            if (!clockEl || !todayEl) return;

            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

            function updateTime() {
                const now = new Date();
                const hh = String(now.getHours()).padStart(2, '0');
                const mm = String(now.getMinutes()).padStart(2, '0');
                clockEl.textContent = `${hh}:${mm}`;

                if (clockEl.dataset.dateSet !== 'true') {
                    todayEl.textContent = `${days[now.getDay()]}, ${now.getDate()} ${months[now.getMonth()]} ${now.getFullYear()}`;
                    clockEl.dataset.dateSet = 'true';
                }
            }
            updateTime();
            setInterval(updateTime, 1000 * 30);
        })();

        // Chart.js & Calendar Initialization
        $(function () {
            // Calendar
            $('#dashboard-calendar').datepicker();

            // Chart Data
            const daysOfWeek = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
            const leaveCounts = @Html.Raw(JsonConvert.SerializeObject(leaveCounts));
            const advanceCounts = @Html.Raw(JsonConvert.SerializeObject(advanceCounts));
            const expenseCounts = @Html.Raw(JsonConvert.SerializeObject(expenseCounts));

            const dataLeaves = daysOfWeek.map(d => leaveCounts[d.replace("Mon", "Monday").replace("Tue", "Tuesday").replace("Wed", "Wednesday").replace("Thu", "Thursday").replace("Fri", "Friday").replace("Sat", "Saturday").replace("Sun", "Sunday")] || 0);
            const dataAdvances = daysOfWeek.map(d => advanceCounts[d.replace("Mon", "Monday").replace("Tue", "Tuesday").replace("Wed", "Wednesday").replace("Thu", "Thursday").replace("Fri", "Friday").replace("Sat", "Saturday").replace("Sun", "Sunday")] || 0);
            const dataExpenses = daysOfWeek.map(d => expenseCounts[d.replace("Mon", "Monday").replace("Tue", "Tuesday").replace("Wed", "Wednesday").replace("Thu", "Thursday").replace("Fri", "Friday").replace("Sat", "Saturday").replace("Sun", "Sunday")] || 0);

            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: { grid: { display: false } },
                    y: { beginAtZero: true, ticks: { precision: 0 } }
                },
                plugins: { legend: { display: false } },
                interaction: { intersect: false, mode: 'index' }
            };

            // Leave Chart (Bar)
            const ctxLeaves = document.getElementById('chartLeaves');
            if (ctxLeaves) {
                new Chart(ctxLeaves, {
                    type: 'bar',
                    data: {
                        labels: daysOfWeek,
                        datasets: [{
                            label: 'Leave Requests',
                            data: dataLeaves,
                            backgroundColor: 'rgba(253, 126, 20, 0.7)',
                            borderColor: 'rgba(253, 126, 20, 1)',
                            borderRadius: 4,
                            borderWidth: 1
                        }]
                    },
                    options: chartOptions
                });
            }

            // Advance Chart (Line)
            const ctxAdvances = document.getElementById('chartAdvances');
            if (ctxAdvances) {
                 const gradient = ctxAdvances.getContext('2d').createLinearGradient(0, 0, 0, 250);
                 gradient.addColorStop(0, 'rgba(25, 135, 84, 0.5)');
                 gradient.addColorStop(1, 'rgba(25, 135, 84, 0)');
                new Chart(ctxAdvances, {
                    type: 'line',
                    data: {
                        labels: daysOfWeek,
                        datasets: [{
                            label: 'Advance Requests',
                            data: dataAdvances,
                            fill: true,
                            backgroundColor: gradient,
                            borderColor: 'rgba(25, 135, 84, 1)',
                            tension: 0.4,
                            pointRadius: 4,
                            pointBackgroundColor: 'rgba(25, 135, 84, 1)'
                        }]
                    },
                    options: chartOptions
                });
            }

            // Expense Chart (Bar)
            const ctxExpenses = document.getElementById('chartExpenses');
            if (ctxExpenses) {
                new Chart(ctxExpenses, {
                    type: 'bar',
                    data: {
                        labels: daysOfWeek,
                        datasets: [{
                            label: 'Expense Requests',
                            data: dataExpenses,
                            backgroundColor: 'rgba(13, 110, 253, 0.7)',
                            borderColor: 'rgba(13, 110, 253, 1)',
                            borderRadius: 4,
                            borderWidth: 1
                        }]
                    },
                    options: chartOptions
                });
            }
        });
    </script>
}