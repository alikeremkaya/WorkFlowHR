@model WorkFlowHR.UI.Areas.Manager.Models.AdvanceVMs.AdvanceEditVM

@{
    ViewData["Title"] = "Update Advance";
}

<!-- Neo-styled modal content -->
<div class="neo-form-card">
    <div class="neo-form-header">
        <div class="neo-dot"></div>
        <div class="neo-dot"></div>
        <div class="neo-dot"></div>
        <span>Update Advance</span>
    </div>

    <form id="advanceUpdateForm" asp-action="Update" method="post" enctype="multipart/form-data" class="neo-form" data-keyboard="true" / data-bs-keyboard="true">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger small mb-3"></div>

        <!-- hidden id (update için gerekli) -->
        <input asp-for="Id" type="hidden" />

        <!-- Image (existing + upload) -->
        <div class="mb-3">
            <label class="form-label neo-label d-block">Receipt Image</label>

            @if (Model.ExistingImage != null)
            {
                <div class="neo-image-thumb mb-2">
                    <img src="data:image/png;base64,@(Convert.ToBase64String(Model.ExistingImage))" alt="existing" />
                </div>
            }

            <label class="neo-file-drop">
                <input asp-for="NewImage" type="file" class="neo-file-input" />
                <div class="neo-file-hint">
                    <div class="neo-file-icon">📎</div>
                    <div>
                        <div class="neo-file-title">Click to upload a new image</div>
                        <div class="neo-file-sub">PNG/JPG, max ~5MB</div>
                    </div>
                </div>
            </label>
            <div id="fileName" class="text-muted mt-1 small"></div>
            <span asp-validation-for="NewImage" class="text-danger small"></span>
        </div>

        <!-- Amount -->
        <div class="mb-3">
            <label asp-for="Amount" class="form-label neo-label">Amount</label>
            <input asp-for="Amount" class="form-control neo-input" required />
            <span asp-validation-for="Amount" class="text-danger small"></span>
        </div>

        <!-- Advance Date -->
        <div class="mb-3">
            <label asp-for="AdvanceDate" class="form-label neo-label">Advance Date</label>
            <input id="AdvanceDate" asp-for="AdvanceDate" type="date" class="form-control neo-input" required />
            <span asp-validation-for="AdvanceDate" class="text-danger small"></span>
        </div>

        <!-- Employee (ManagerId alanı) -->
        <div class="mb-4">
            <label asp-for="ManagerId" class="form-label neo-label">Employee</label>
            <select asp-for="ManagerId" asp-items="@Model.Managers" class="form-control neo-input" required>
                <option value="">--- Select Employee ---</option>
            </select>
            <span asp-validation-for="ManagerId" class="text-danger small"></span>
        </div>

        <div class="d-grid">
            <button type="submit" class="btn neo-btn-gradient">Save</button>
        </div>
    </form>

    <div class="text-center mt-3">
        <a asp-action="Index" class="btn neo-btn-secondary">Back to List</a>
    </div>
</div>


<script>
    (function () {
        const $form = $('#advanceUpdateForm');
        if (!$form.length || $form.data('bound')) return;
        $form.data('bound', true);

        // jQuery Validate (assumes jQuery + jquery.validate already on layout)
        $form.validate({
            errorClass: 'text-danger',
            validClass: 'text-success',
            errorPlacement: function (error, element) { error.insertAfter(element); },
            messages: {
                NewImage: "Lütfen bu alanı doldurun.",
                Amount: "Lütfen bu alanı doldurun.",
                AdvanceDate: "Lütfen bu alanı doldurun.",
                ManagerId: "Lütfen bu alanı doldurun."
            },
            submitHandler: function (form) {
                // Client-side date guard
                const el = document.getElementById('AdvanceDate');
                if (el) {
                    const chosen = new Date(el.value);
                    const now = new Date();
                    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    if (chosen < today) {
                        el.setCustomValidity('Start date must be later than the current date.');
                        el.reportValidity();
                        return false;
                    } else {
                        el.setCustomValidity('');
                    }
                }

                $.ajax({
                    type: $(form).attr('method'),
                    url: $(form).attr('action'),
                    data: new FormData(form),
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response && response.success) {
                            window.location.href = response.redirectUrl;
                        } else if (response && response.errors) {
                            $.each(response.errors, function (key, value) {
                                var $err = $('[name="' + key + '"]').next('.text-danger');
                                $err.text(value);
                            });
                        } else {
                            // Fallback (controller might return full view)
                            location.reload();
                        }
                    },
                    error: function () {
                        alert("An unexpected error occurred.");
                    }
                });
                return false;
            }
        });

        // UX: clicking the pretty drop zone opens file picker
        $form.on('click', '.neo-file-drop', function () {
            $(this).find('input[type="file"]').trigger('click');
        });

        // Show selected filename
        $form.on('change', 'input[type="file"][name="NewImage"]', function () {
            const file = this.files && this.files[0];
            $('#fileName').text(file ? file.name : '');
        });

        // Clear custom validity on date change
        $form.on('change', '#AdvanceDate', function () {
            this.setCustomValidity('');
        });
    })();
</script>

<style>
    /* Card/wrapper */
    .neo-form-card {
        background: rgba(255,255,255,.9);
        border: 1px solid rgba(2,6,23,.08);
        border-radius: 16px;
        box-shadow: 0 12px 30px rgba(2,6,23,.12);
        padding: 18px 16px 22px 16px;
    }

    /* Header bar */
    .neo-form-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 10px;
        padding: 10px 12px;
        border-radius: 12px;
        background: linear-gradient(90deg, rgba(124,58,237,.10), rgba(6,182,212,.10));
        border: 1px solid rgba(2,6,23,.06);
        font-weight: 700;
        color: #0f172a;
    }

    .neo-dot {
        width: 10px;
        height: 10px;
        border-radius: 999px;
        background: #7c3aed;
        box-shadow: 0 0 0 3px rgba(124,58,237,.15) inset;
    }

    /* Labels & inputs */
    .neo-label {
        font-weight: 600;
        color: #0f172a;
    }

    .neo-input {
        border-radius: 12px;
        border: 1px solid rgba(2,6,23,.15);
        background: rgba(255,255,255,.9);
        transition: box-shadow .2s ease, border-color .2s ease, transform .08s ease;
    }
    .neo-input:focus {
        border-color: #7c3aed;
        box-shadow: 0 0 0 .2rem rgba(124,58,237,.15);
        transform: translateY(-1px);
    }

    /* File drop */
    .neo-file-drop {
        display: flex;
        align-items: center;
        gap: 12px;
        cursor: pointer;
        border: 1.5px dashed rgba(2,6,23,.18);
        background: linear-gradient(180deg, rgba(255,255,255,.92), rgba(248,250,252,.85));
        border-radius: 14px;
        padding: 14px 12px;
        position: relative;
        transition: border-color .2s ease, box-shadow .2s ease, transform .08s ease;
    }
    .neo-file-drop:hover { border-color: #06b6d4; transform: translateY(-1px); }

    .neo-file-input { position: absolute; inset: 0; opacity: 0; cursor: pointer; }
    .neo-file-icon { font-size: 20px; line-height: 1; }
    .neo-file-title { font-weight: 700; color: #0f172a; }
    .neo-file-sub { font-size: 12px; color: #64748b; }

    /* Existing image thumb */
    .neo-image-thumb {
        display: inline-flex;
        padding: 6px;
        border-radius: 12px;
        border: 1px solid rgba(2,6,23,.08);
        background: rgba(255,255,255,.9);
        box-shadow: 0 6px 16px rgba(2,6,23,.08);
    }
    .neo-image-thumb img {
        display: block;
        max-width: 140px;
        max-height: 140px;
        border-radius: 10px;
    }

    /* Buttons */
    .neo-btn-gradient{
        background: linear-gradient(90deg,#06b6d4,#22d3ee);
        color:#fff !important; border:none; border-radius:999px;
        font-weight:600; letter-spacing:.2px; padding:10px 18px;
        box-shadow:0 10px 20px rgba(2,6,23,.18);
        transition:transform .15s ease, box-shadow .15s ease;
    }
    .neo-btn-gradient:hover{
        transform:translateY(-1px); box-shadow:0 14px 28px rgba(2,6,23,.20);
    }

    .neo-btn-secondary{
        background: rgba(2,6,23,.06); color:#0f172a; border:none; border-radius:999px;
        font-weight:600; padding:8px 16px; transition: background .15s ease, transform .1s ease;
    }
    .neo-btn-secondary:hover{ background: rgba(2,6,23,.10); transform: translateY(-1px); }

    .text-danger.small { font-size: .85rem; }
</style>
